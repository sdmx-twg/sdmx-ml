<?xml version="1.0" encoding="UTF-8"?>
<!-- Copyright SDMX 2010 - http://www.sdmx.org -->
<xs:schema targetNamespace="http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure" xmlns:structure="http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure" xmlns:common="http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common">
	<xs:import namespace="http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common" schemaLocation="SDMXCommon.xsd"/>
	<xs:include schemaLocation="SDMXStructureBase.xsd"/>

	<xs:annotation>
		<xs:appinfo>SDMX Transformation Structure Module</xs:appinfo>
		<xs:documentation>The transformation structure module defines the structure of transformation scheme and transformation constructs.</xs:documentation>
	</xs:annotation>
	
	<xs:complexType name="VtlDefinitionSchemeType" abstract="true">
		<xs:annotation>
			<xs:documentation>VtlDefinitionSchemeType is an abstract extension of the ItemSchemeType for VTL schemes.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="ItemSchemeType">
				<xs:attribute name="vtlVersion" type="xs:string" use="required">
					<xs:annotation>
						<xs:documentation>Identifies the VTL version to which the items in the defined scheme comply. Note that definition schemes can only reference definition schemes using the same VTL version.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:complexType name="TransformationSchemeBaseType" abstract="true">
		<xs:annotation>
			<xs:documentation>TransformationSchemeBaseType is an abstract base type for the TransformationSchemeType. It restricts the item types to be only transformations.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:restriction base="VtlDefinitionSchemeType">
				<xs:sequence>
					<xs:element ref="common:Annotations" minOccurs="0"/>
					<xs:element ref="common:Name" maxOccurs="unbounded"/>
					<xs:element ref="common:Description" minOccurs="0" maxOccurs="unbounded"/>
					<xs:sequence minOccurs="0" maxOccurs="unbounded">
						<xs:element ref="Transformation"/>
					</xs:sequence>
				</xs:sequence>
			</xs:restriction>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:complexType name="TransformationSchemeType">
		<xs:annotation>
			<xs:documentation>TransformationSchemeType describes the structure of a transformation scheme. A transformation scheme contains a set of transformations to be executed together (in the same run). It can contain any number of transformations that produce any number of results.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="TransformationSchemeBaseType">
				<xs:sequence>
					<xs:element name="VtlMappingScheme" type="common:VtlMappingSchemeReferenceType">
						<xs:annotation>
							<xs:documentation>References a VTL mapping scheme which defines aliases for given SDMX artefacts that are used in the transformations as well as the mapping methods used when converting between SDMX and VTL data structures. All aliases must be defined in the referenced scheme. This also must be used if the basic mapping methods are not used.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="NamePersonalisationScheme" type="common:NamePersonalisationSchemeReferenceType" minOccurs="0">
						<xs:annotation>
							<xs:documentation>References a name personalisation scheme, which defines the overriding of some standard VTL names (to be assigned to some measures and/or attributes of the data structure) with some corresponding personalised names. This must be used if transformations within a transformation scheme personalise standard names. All personalisations must be defined in the referenced scheme.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="CustomTypeScheme" type="common:CustomTypeSchemeReferenceType" minOccurs="0">
						<xs:annotation>
							<xs:documentation>References a custom type scheme which defines custom conversions of VTL scalar types to SDMX data types. This must be used if custom type conversions are used in the transformations defined in a transformation scheme. All custom conversions must be defined in the referenced scheme.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="RulesetScheme" type="common:RulesetSchemeReferenceType" minOccurs="0" maxOccurs="unbounded">
						<xs:annotation>
							<xs:documentation>References a ruleset scheme that defines one or more previously defined rulesets which can be invoked by VTL operators. If a transformation defined in a transformation scheme refers to a ruleset, the scheme in which the ruleset is defined must be referenced here.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="UserDefinedOperatorScheme" type="common:UserDefinedOperatorSchemeReferenceType" minOccurs="0" maxOccurs="unbounded">
						<xs:annotation>
							<xs:documentation>References a user defined operator scheme that defines one or more user defined operators used by the transformations defined in a transformation scheme. If a transformation in a transformation scheme refers to a user defined operator, the scheme in which the user defined operator is defined must be referenced here.</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:element name="Transformation" type="TransformationType" substitutionGroup="Item">
		<xs:annotation>
			<xs:documentation>Transformation describes the details of a single transformation within a transformation scheme.</xs:documentation>
		</xs:annotation>
	</xs:element>

	<xs:complexType name="TransformationType">
		<xs:annotation>
			<xs:documentation>TransformationType defines the structure of a transformation. A transformation is an assignment of a VTL expression to a specific result.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="UnnestedItemType">
				<xs:sequence>
					<xs:element name="Expression" type="xs:string">
						<xs:annotation>
							<xs:documentation>The right-hand side of the VTL statement. This is expression that is executed for this transformation. It include references to operands and other artefacts. The expression may contain references to SDMX artefacts using the reduced URN format; see Section 6 SDMX Standards ("SDMX Technical Notes"), 10.2.3 ("Abbreviation of the URN").</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="Result" type="xs:string">
						<xs:annotation>
							<xs:documentation>The left-hand side of the VTL statement. This identifies the result artefact, which may be used in subsequent transformations. If the result is an SDMX artefact, the is expressed using the alias; see Section 6 SDMX Standards ("SDMX Technical Notes"), 10.2.3 ("Abbreviation of the URN").</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
				<xs:attribute name="isPersistent" type="xs:boolean" use="required">
					<xs:annotation>
						<xs:documentation>Indicates if the the result is permanently stored. A persistent result (value of true) can be used by transformation defined in other transformation schemes, but a non-persistent result (value of false) can only be used by transformations within the same transformation scheme.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="VtlMappingSchemeType">
		<xs:annotation>
			<xs:documentation>VtlMappingSchemeType defines a set of mappings between SDMX and VTL.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:restriction base="ItemSchemeType">
				<xs:sequence>
					<xs:element ref="common:Annotations" minOccurs="0"/>
					<xs:element ref="common:Name" maxOccurs="unbounded"/>
					<xs:element ref="common:Description" minOccurs="0" maxOccurs="unbounded"/>
					<xs:sequence minOccurs="0" maxOccurs="unbounded">
						<xs:element ref="VtlMapping"/>
					</xs:sequence>
				</xs:sequence>
			</xs:restriction>
		</xs:complexContent>
	</xs:complexType>

	<xs:element name="VtlMapping" type="VtlMappingType" substitutionGroup="Item">
		<xs:annotation>
			<xs:documentation>VtlMapping details a mapping between SDMX and VTL transformation.</xs:documentation>
		</xs:annotation>
	</xs:element>

	<xs:complexType name="VtlMappingType">
		<xs:annotation>
			<xs:documentation>VtlMappingType defines the structure of a single mapping between the reference to a SDMX artefact made from VTL transformations, rulesets, user defined operators and the corresponding SDMX structure identifier. These are used to assign an alternative names to SDMX Dataflows, Codelists, Concept Schemes, or Concepts. Although are distinct sub-classes in the Information Model, this structure serves to express them all. The references SDMX artefact serves to distinguish which type of sub-class (VtlDatflowMapping, VtlCodelistMapping, or VtlConceptSchemeMapping) is being described. When this is used to assign an alias for a SDMX Dataflow, this can also be used to indicate the methods used to convert the data structure from SDMX to VTL and vice-versa. Finally, this can be used to override the deault Basic mapping methods used for Dataflows by utilizing the GenericDataflow element in place of a reference to a specific Dataflow.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="UnnestedItemType">
				<xs:sequence>
					<xs:choice>
						<xs:sequence>
							<xs:choice>
								<xs:element name="Dataflow" type="common:DataflowReferenceType">
									<xs:annotation>
										<xs:documentation>A reference to the SDMX Dataflow that the mapping is defined for. This is used to create a VtlDataflowMapping. In this case, it is possible to specify the mapping details to and from VTL.</xs:documentation>
									</xs:annotation>
								</xs:element>
								<xs:element name="GenericDataflow" type="common:EmptyType">
									<xs:annotation>
										<xs:documentation>Indicates that the ToVtlMapping and FromVtlMapping are the default mapping methods to be applied, overriding the Basic methods if necessary. The mapping methods in this case would be applied to any dataflows that are not explicitly defined in other VtlMappings.</xs:documentation>
									</xs:annotation>
								</xs:element>
							</xs:choice>
							<xs:element name="ToVtlMapping" type="ToVtlMappingType" minOccurs="0">
								<xs:annotation>
									<xs:documentation>Describes the mapping from a SDMX dataflow to a VTL data structure.</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name="FromVtlMapping" type="FromVtlMappingType" minOccurs="0">
								<xs:annotation>
									<xs:documentation>Describes the mapping to a SDMX dataflow from a VTL data structure.</xs:documentation>
								</xs:annotation>
							</xs:element>
						</xs:sequence>
						<xs:element name="Codelist" type="common:CodelistReferenceType">
							<xs:annotation>
								<xs:documentation>A reference to the SDMX Codelist that the mapping is defined for. This is used to create a VtlCodelistMapping.</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="ConceptScheme" type="common:ConceptSchemeReferenceType">
							<xs:annotation>
								<xs:documentation>A reference to the SDMX Concept Scheme that the mapping is defined for. This is used to create a VtlConceptSchemeMapping.</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="Concept" type="common:ConceptReferenceType">
							<xs:annotation>
								<xs:documentation>A reference to the SDMX Concept that the mapping is defined for. This is used to create a VtlConceptMapping.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:choice>
				</xs:sequence>
				<xs:attribute name="alias" type="xs:string" use="required">
					<xs:annotation>
						<xs:documentation>The alias used to refer to the reference SDMX artefact in the transformations. This must be unique within the mapping scheme in which it is defined.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="ToVtlMappingType">
		<xs:annotation>
			<xs:documentation>ToVtlMappingType defines the mapping method and filter used when mapping from SDMX to VTL.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="ToVtlSubSpace" type="SpaceKeyType" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Identfies a sub space of the mapped dataflow that the mapping applies to. This is a collection of references to the dimensions that make up the space.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="method" type="ToVtlMappingMethodType" use="optional">
			<xs:annotation>
				<xs:documentation>The mapping method used when mapping from SDMX to VTL. This is typically a StandardToVtlMappingMethodType, but can be any other value to allow for non-standard methods. The implied default is Basic.</xs:documentation>
			</xs:annotation>		
		</xs:attribute>
	</xs:complexType>

	<xs:simpleType name="StandardToVtlMappingMethodType">
		<xs:annotation>
			<xs:documentation>A simple type enumerating the standard mapping methods when converting from data structures from SDMX to VLT.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:enumeration value="Basic">
				<xs:annotation>
					<xs:documentation>The default mapping method. See Section 6 SDMX Standards ("SDMX Technical Notes"), 10.3.3.1 ("Basic Mapping").</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="Pivot">
				<xs:annotation>
					<xs:documentation>Method for mapping multi-measure data. See Section 6 SDMX Standards ("SDMX Technical Notes"), 10.3.3.2 ("Pivot Mapping").</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="Basic-A2M">
				<xs:annotation>
					<xs:documentation>The basic mapping method, using attributes to measures. See Section 6 SDMX Standards ("SDMX Technical Notes"), 10.3.3.3 ("From SDMX DataAttributes to VTL Measures").</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="Pivot-A2M">
				<xs:annotation>
					<xs:documentation>The pivot mapping method, using attributes to measures. See Section 6 SDMX Standards ("SDMX Technical Notes"), 10.3.3.3 ("From SDMX DataAttributes to VTL Measures").</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="ToVtlMappingMethodType">
		<xs:annotation>
			<xs:documentation>A simple type that allows for a standard to VTL mapping method enumeration value or a string value for other mapping methods.</xs:documentation>
		</xs:annotation>
		<xs:union memberTypes="StandardToVtlMappingMethodType xs:string"/>
	</xs:simpleType>

	<xs:complexType name="FromVtlMappingType">
		<xs:annotation>
			<xs:documentation>FromVtlMappingType defines the mapping method and filter used when mapping from VTL to SDMX.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="FromVtlSuperSpace" type="SpaceKeyType" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Identfies a super space of the mapped dataflow that the mapping applies to. This is a collection of references to the dimensions that make up the space.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="method" type="FromVtlMappingMethodType" use="optional">
			<xs:annotation>
				<xs:documentation>The mapping method used when mapping from VTL to SDMX. This is typically a StandardFromVtlMappingMethodType, but can be any other value to allow for non-standard methods. The implied default is Basic for single-measure VTL data structures and Unpivot for multi-meausre VTL data structures.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>

	<xs:simpleType name="StandardFromVtlMappingMethodType">
		<xs:annotation>
			<xs:documentation>A simple type enumerating the standard mapping methods when converting from data structures from VTL to SDMX.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:enumeration value="Basic">
				<xs:annotation>
					<xs:documentation>The default mapping method, applicable only when the VLT data structure has just one measure component. See Section 6 SDMX Standards ("SDMX Technical Notes"), 10.3.4.1 ("Basic Mapping").</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="Unpivot">
				<xs:annotation>
					<xs:documentation>The mapping method to be used when the VTL data structure has more than one measure component. See Section 6 SDMX Standards ("SDMX Technical Notes"), 10.3.4.2 ("Unpivot Mapping").</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="M2A">
				<xs:annotation>
					<xs:documentation>Mapping of multi-measure VTL where on measure is mapped to the SDMX primary measure and the remaining measures are mapped as data attributes. See Section 6 SDMX Standards ("SDMX Technical Notes"), 10.3.4.3 ("From VTL Measures to SDMX DataAttributes").</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="FromVtlMappingMethodType">
		<xs:annotation>
			<xs:documentation>A simple type that allows for standard from VTL mapping method enumeration value or a string value for other mapping methods.</xs:documentation>
		</xs:annotation>
		<xs:union memberTypes="StandardFromVtlMappingMethodType xs:string"/>
	</xs:simpleType>

	<xs:complexType name="SpaceKeyType">
		<xs:annotation>
			<xs:documentation>SpaceKey defines the structure of a super- or sub- space for a SDMX Dataflow. It is a collection of references to the dimensions that make up the space.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Key" type="common:SingleNCNameIDType" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>A reference to a dimension by its identifier.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="NamePersonalisationSchemeType">
		<xs:annotation>
			<xs:documentation>NamePersonalisationSchemeType defines a set of personalisations of VTL standard names that are used in a set of transformations.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:restriction base="VtlDefinitionSchemeType">
				<xs:sequence>
					<xs:element ref="common:Annotations" minOccurs="0"/>
					<xs:element ref="common:Name" maxOccurs="unbounded"/>
					<xs:element ref="common:Description" minOccurs="0" maxOccurs="unbounded"/>
					<xs:sequence minOccurs="0" maxOccurs="unbounded">
						<xs:element ref="NamePersonalisation"/>
					</xs:sequence>
				</xs:sequence>
			</xs:restriction>
		</xs:complexContent>
	</xs:complexType>

	<xs:element name="NamePersonalisation" type="NamePersonalisationType" substitutionGroup="Item">
		<xs:annotation>
			<xs:documentation>NamePersonalisation details a name personalisation that is used in a transformation.</xs:documentation>
		</xs:annotation>
	</xs:element>

	<xs:complexType name="NamePersonalisationType">
		<xs:annotation>
			<xs:documentation>NamePersonalisationType defines the structure of a name personalisation. A name personalisation is is used in place of a standard VTL name in some VTL operations.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="UnnestedItemType">
				<xs:sequence>
					<xs:element name="VtlDefaultName" type="xs:string">
						<xs:annotation>
							<xs:documentation>Provides the VTL standard name that is being personalised.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="PersonalisedName" type="xs:string">
						<xs:annotation>
							<xs:documentation>Provides the personalised name that is used in place of the VTL standard name in the transformation expressions.</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
				<xs:attribute name="vtlArtefact" type="xs:string" use="required">
					<xs:annotation>
						<xs:documentation>Identifies the type of VTL model artefact that is being personalised. In VTL 2.0, this is valuedomain or variable.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="RulesetSchemeBaseType" abstract="true">
		<xs:annotation>
			<xs:documentation>RulesetSchemeBaseType is an abstract base type for the RulesetSchemeType. It restricts the item types to be only rulesets.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:restriction base="VtlDefinitionSchemeType">
				<xs:sequence>
					<xs:element ref="common:Annotations" minOccurs="0"/>
					<xs:element ref="common:Name" maxOccurs="unbounded"/>
					<xs:element ref="common:Description" minOccurs="0" maxOccurs="unbounded"/>
					<xs:sequence minOccurs="0" maxOccurs="unbounded">
						<xs:element ref="Ruleset"/>
					</xs:sequence>
				</xs:sequence>
			</xs:restriction>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="RulesetSchemeType">
		<xs:annotation>
			<xs:documentation>RulesetSchemeType defines a collection of rulesets that are used in transformations.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="RulesetSchemeBaseType">
				<xs:sequence>
					<xs:element name="VtlMappingScheme" type="common:VtlMappingSchemeReferenceType" minOccurs="0">
						<xs:annotation>
							<xs:documentation>References a VTL mapping scheme which defines aliases for given SDMX artefacts that are used in the rulesets. Rulesets defined on value domains reference Codelists or Concept Schemes (the latter in VTL are considered as the Value Domains of the variables corresponding to the SDMX Measure Dimensions). The rulesets defined on variables reference Concepts (for which a definite representation is assumed). Therefore, a ruleset should only refer to Codelists, Concept Schemes, and Concepts.</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:element name="Ruleset" type="RulesetType" substitutionGroup="Item">
		<xs:annotation>
			<xs:documentation>Ruleset details a ruleset within a ruleset scheme.</xs:documentation>
		</xs:annotation>
	</xs:element>

	<xs:complexType name="RulesetType">
		<xs:annotation>
			<xs:documentation>RulesetType defines the structure of a ruleset. A ruleset is a persistent set of rules which can be invoked by using appropriate VTL operators.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="UnnestedItemType">
				<xs:sequence>
					<xs:element name="RulesetDefinition" type="xs:string">
						<xs:annotation>
							<xs:documentation>A VTL statement for the definition of a ruleset. This must conform to the syntax of the VTL definition language.</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
				<xs:attribute name="rulesetType" type="xs:string" use="required">
					<xs:annotation>
						<xs:documentation>The VTL type of the ruleset. In VTL 2.0, this is datapoint or hierarchical</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="rulesetScope" type="xs:string" use="required">
					<xs:annotation>
						<xs:documentation>This model artefact on which the ruleset is defined. In VTL 2.0, this is value domain or variable.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="UserDefinedOperatorSchemeType">
		<xs:annotation>
			<xs:documentation>UserDefinedOperatorSchemeType defines a collection of user defined operators that are used in transformations.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:restriction base="VtlDefinitionSchemeType">
				<xs:sequence>
					<xs:element ref="common:Annotations" minOccurs="0"/>
					<xs:element ref="common:Name" maxOccurs="unbounded"/>
					<xs:element ref="common:Description" minOccurs="0" maxOccurs="unbounded"/>
					<xs:sequence minOccurs="0" maxOccurs="unbounded">
						<xs:element ref="UserDefinedOperator"/>
					</xs:sequence>
				</xs:sequence>
			</xs:restriction>
		</xs:complexContent>
	</xs:complexType>

	<xs:element name="UserDefinedOperator" type="UserDefinedOperatorType" substitutionGroup="Item">
		<xs:annotation>
			<xs:documentation>UserDefinedOperator details a user defined operators within a user defined operator scheme.</xs:documentation>
		</xs:annotation>	
	</xs:element>

	<xs:complexType name="UserDefinedOperatorType">
		<xs:annotation>
			<xs:documentation>UserDefinedOperatorType defines the structure of a user defined operator. A user defined operator is a custom VTL operator (not existing in the standard library) that extends the VTL standard library for specific purposes. In addition to its identification and name, and definition of the operator must be provided.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="UnnestedItemType">
				<xs:sequence>
					<xs:element name="OperatorDefinition" type="xs:string">
						<xs:annotation>
							<xs:documentation>A VTL statement for the definition of a new operator: it specifies the operator name, its parameters and their data types, the VTL expression that defines its behaviour.</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="CustomTypeSchemeType">
		<xs:annotation>
			<xs:documentation>CustomTypeSchemeType defines a collection of custom types that are used in transformations.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:restriction base="VtlDefinitionSchemeType">
				<xs:sequence>
					<xs:element ref="common:Annotations" minOccurs="0"/>
					<xs:element ref="common:Name" maxOccurs="unbounded"/>
					<xs:element ref="common:Description" minOccurs="0" maxOccurs="unbounded"/>
					<xs:sequence minOccurs="0" maxOccurs="unbounded">
						<xs:element ref="CustomType"/>
					</xs:sequence>
				</xs:sequence>
			</xs:restriction>
		</xs:complexContent>
	</xs:complexType>

	<xs:element name="CustomType" type="CustomTypeType" substitutionGroup="Item">
		<xs:annotation>
			<xs:documentation>CustomType details a custom type within a custom type scheme.</xs:documentation>
		</xs:annotation>
	</xs:element>

	<xs:complexType name="CustomTypeType">
		<xs:annotation>
			<xs:documentation>CustomTypeType defines the structure of a custom type. A custom type specifies a custom conversion for a VTL scalar type to a resulting data type. This conversion overrides the default conversion.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="UnnestedItemType">
				<xs:sequence>
					<xs:element name="VtlScalarType" type="xs:string">
						<xs:annotation>
							<xs:documentation>Identifies the VTL scalar type that is to be converted to an resulting output data type.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="DataType" type="CustomTypeDataType">
						<xs:annotation>
							<xs:documentation>Identifies the resulting output data type the VTL scalar type is to be converted to. If this is an SDMX data type, it must use the proper SimpleDataType enumeration value. For all other data types, a string value can be used to identify the type.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="VtlLiteralFormat" type="xs:string" minOccurs="0">
						<xs:annotation>
							<xs:documentation>The format in which the literals of the VTL scalar type are expressed in the transformations. This is only needed if the format is different than the output format expressed by means of the VTL type.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="OutputFormat" type="xs:string" minOccurs="0">
						<xs:annotation>
							<xs:documentation>The format the VTL scalar type has to assume (e.g. YYYY-MM-DD; see VTL specifications), both for the literals in the VTL expressions and for the conversion to the output.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="NullValue" type="xs:string" minOccurs="0">
						<xs:annotation>
							<xs:documentation>The value to be produced in the output of the conversion when a component has a null value.</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:simpleType name="CustomTypeDataType">
		<xs:annotation>
			<xs:documentation>A simple type that allows for a SDMX simple data type enumeration value or a string value for other data types.</xs:documentation>
		</xs:annotation>
		<xs:union memberTypes="common:SimpleDataType xs:string"/>
	</xs:simpleType>

</xs:schema>